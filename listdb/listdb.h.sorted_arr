#ifndef LISTDB_LISTDB_H_
#define LISTDB_LISTDB_H_

#include <deque>
#include <fstream>
#include <iomanip>
#include <queue>
#include <sstream>
#include <stack>
#include <thread>
#include <unordered_map>

#include <experimental/filesystem>

#include "listdb/common.h"
#include "listdb/index/lockfree_skiplist.h"
#include "listdb/index/braided_pmem_skiplist.h"
#include "listdb/index/simple_hash_table.h"
#include "listdb/lsm/level_list.h"
#include "listdb/lsm/memtable_list.h"
#include "listdb/lsm/pmemtable_list.h"
#include "listdb/lsm/pmemtable.h"

namespace fs = std::experimental::filesystem::v1;

class ListDB {
 public:
  using MemNode = lockfree_skiplist::Node;
  using PmemNode = BraidedPmemSkipList::Node;

  struct Task {
    TaskType type;
    int shard;
  };

  struct MemTableFlushTask : Task {
    MemTable* imm;
    MemTableList* memtable_list;
  };

  struct L0CompactionTask : Task {
    PmemTable* l0;
    MemTableList* memtable_list;
  };

  struct alignas(64) CompactionWorkerData {
    int id;
    bool stop;
    std::queue<Task*> q;
    std::mutex mu;
    std::condition_variable cv;
    Task* current_task;
  };

  ~ListDB();

  void Init();

  //void Put(const Key& key, const Value& value);

  MemTable* GetWritableMemTable(size_t kv_size, int shard);

  MemTable* GetMemTable(int shard);

#ifdef LOOKUP_CACHE
  SimpleHashTable* GetHashTable(int shard);
#endif

  TableList* GetTableList(int level, int shard);

  PmemLog* log(int region, int shard) { return log_[region][shard]; }

  // Background Works
  void BackgroundThreadLoop();

  void CompactionWorkerThreadLoop(CompactionWorkerData* td);

  void FlushMemTable(MemTableFlushTask* task);

  void ManualFlushMemTable(int shard);

  void ZipperCompactionL0(L0CompactionTask* task);

  void L0CompactionCopyOnWrite(L0CompactionTask* task);

  // Utility Functions
  void PrintDebugLsmState(int shard);

  std::vector<std::pair<uint64_t, uint64_t>>& sorted_arr(int r, int s) { return sorted_arr_[r][s]; }

  size_t total_sorted_arr_size() {
    size_t total_size = 0;
    for (auto& rs : sorted_arr_) {
      for (auto& ss : rs) {
        total_size += ss.size() * 16;
      }
    }
    return total_size;
  }
  

 private:
  PmemLog* log_[kNumRegions][kNumShards];
  PmemLog* l1_arena_[kNumRegions][kNumShards];
  LevelList* ll_[kNumShards];

#ifdef LOOKUP_CACHE
  SimpleHashTable* hash_table_[kNumShards];
#endif

  std::unordered_map<int, int> pool_id_to_region_;

  std::queue<MemTableFlushTask*> memtable_flush_queue_;
  std::mutex bg_mu_;
  std::condition_variable bg_cv_;

  std::deque<Task*> work_request_queue_;
  std::deque<Task*> work_completion_queue_;
  std::mutex wq_mu_;
  std::condition_variable wq_cv_;

  std::thread bg_thread_;
  bool stop_ = false;

  CompactionWorkerData worker_data_[kNumWorkers];
  std::thread worker_threads_[kNumWorkers];

  std::vector<std::pair<uint64_t, uint64_t>> sorted_arr_[kNumRegions][kNumShards];
};


ListDB::~ListDB() {
  fprintf(stdout, "D \n");
  stop_ = true;
  bg_thread_.join();

  for (int i = 0; i < kNumWorkers; i++) {
    worker_data_[i].stop = true;
    worker_data_[i].cv.notify_one();
    worker_threads_[i].join();
  }
}

void ListDB::Init() {
  // Log Pmem Pool
  for (int i = 0; i < kNumRegions; i++) {
    std::stringstream pss;
    pss << "/pmem" << i << "/wkim/listdb_log";
    std::string path = pss.str();
    fs::remove_all(path);
    fs::create_directories(path);

    std::string poolset = path + ".set";
    std::fstream strm(poolset, strm.out);
    strm << "PMEMPOOLSET" << std::endl;
    strm << "OPTION SINGLEHDR" << std::endl;
    strm << "400G " << path << "/" << std::endl;
    strm.close();

    int pool_id = Pmem::BindPoolSet<pmem_log_root>(poolset, "");
    pool_id_to_region_[pool_id] = i;
    auto pool = Pmem::pool<pmem_log_root>(pool_id);

    //pool_table[i] = Pmem::pool<pmem_log_root>(pool_id);
    for (int j = 0; j < kNumShards; j++) {
      log_[i][j] = new PmemLog(pool_id, j);
    }
  }

#ifdef L1_COW
  // Pmem Pool for L1
  for (int i = 0; i < kNumRegions; i++) {
    std::stringstream pss;
    pss << "/pmem" << i << "/wkim/listdb_l1";
    std::string path = pss.str();
    fs::remove_all(path);
    fs::create_directories(path);

    std::string poolset = path + ".set";
    std::fstream strm(poolset, strm.out);
    strm << "PMEMPOOLSET" << std::endl;
    strm << "OPTION SINGLEHDR" << std::endl;
    strm << "400G " << path << "/" << std::endl;
    strm.close();

    int pool_id = Pmem::BindPoolSet<pmem_log_root>(poolset, "");
    pool_id_to_region_[pool_id] = i;
    auto pool = Pmem::pool<pmem_log_root>(pool_id);

    for (int j = 0; j < kNumShards; j++) {
      l1_arena_[i][j] = new PmemLog(pool_id, j);
    }
  }
#else
  for (int i = 0; i < kNumRegions; i++) {
    for (int j = 0; j < kNumShards; j++) {
      l1_arena_[i][j] = log_[i][j];
    }
  }
#endif

  for (int i = 0; i < kNumShards; i++) {
    ll_[i] = new LevelList();
    // MemTableList
    {
      auto tl = new MemTableList(kMemTableCapacity / kNumShards);
      tl->BindEnqueueFunction([&, tl, i](MemTable* mem) {
        //fprintf(stdout, "binded enq fn, mem = %p\n", mem);
        auto task = new MemTableFlushTask();
        task->type = TaskType::kMemTableFlush;
        task->shard = i;
        task->imm = mem;
        task->memtable_list = tl;
        std::unique_lock<std::mutex> lk(wq_mu_);
        work_request_queue_.push_back(task);
        lk.unlock();
        wq_cv_.notify_one();
      });
      for (int j = 0; j < kNumRegions; j++) {
        tl->BindArena(j, log_[j][i]);
      }
      ll_[i]->SetTableList(0, tl);
    }

    // L1 List
    {
      auto tl = new PmemTableList(std::numeric_limits<size_t>::max(), l1_arena_[0][0]->pool_id());
      for (int j = 0; j < kNumRegions; j++) {
        tl->BindArena(l1_arena_[j][i]->pool_id(), l1_arena_[j][i]);
      }
      ll_[i]->SetTableList(1, tl);
    }
  }

#ifdef LOOKUP_CACHE
  // HashTable
  for (int i = 0; i < 1; i++) {
    hash_table_[i] = new SimpleHashTable(kHTSize);
    for (size_t j = 0; j < kHTSize; j++) {
      hash_table_[i]->at(j)->version = 1UL;
    }
  }
#endif

  bg_thread_ = std::thread(std::bind(&ListDB::BackgroundThreadLoop, this));

  for (int i = 0; i < kNumWorkers; i++) {
    worker_data_[i].id = i;
    worker_data_[i].stop = false;
    worker_threads_[i] = std::thread(std::bind(&ListDB::CompactionWorkerThreadLoop, this, &worker_data_[i]));

    //sched_param sch;
    //int policy; 
    //pthread_getschedparam(worker_threads_[i].native_handle(), &policy, &sch);
    //sch.sched_priority = 20;
    //pthread_setschedparam(worker_threads_[i].native_handle(), SCHED_FIFO, &sch);
  }
}

void ListDB::BackgroundThreadLoop() {
  static const int kWorkerQueueDepth = 2;
  std::vector<int> num_assigned_tasks(kNumWorkers);
  std::unordered_map<Task*, int> task_to_worker;
  std::deque<Task*> memtable_flush_requests;
  std::deque<Task*> l0_compaction_requests;
  std::vector<int> l0_compaction_state(kNumShards);
  struct ReqCompCounter {
    size_t req_cnt = 0;
    size_t comp_cnt = 0;
  };
  std::map<TaskType, ReqCompCounter> req_comp_cnt;
  req_comp_cnt.emplace(TaskType::kMemTableFlush, ReqCompCounter());

  while (true) {
    std::deque<Task*> new_work_requests;
    std::deque<Task*> work_completions;
    std::unique_lock<std::mutex> lk(wq_mu_);
    wq_cv_.wait_for(lk, std::chrono::seconds(1), [&]{
      //return !work_request_queue_.empty() || !work_completion_queue_.empty();
      return !work_request_queue_.empty() || !memtable_flush_requests.empty();
    });
    new_work_requests.swap(work_request_queue_);
    work_completions.swap(work_completion_queue_);
    lk.unlock();

    for (auto& task : work_completions) {
      auto it = task_to_worker.find(task);
      int worker_id = it->second;
      task_to_worker.erase(it);
      if (task->type == TaskType::kL0Compaction) {
        l0_compaction_state[task->shard] = 0;
      }
      num_assigned_tasks[worker_id]--;
      req_comp_cnt[task->type].comp_cnt++;
      delete task;
    }

    for (auto& task : new_work_requests) {
      if (task->type == TaskType::kMemTableFlush) {
        memtable_flush_requests.push_back(task);
      } else {
        fprintf(stdout, "unknown task request: %d\n", (int) task->type);
        exit(1);
      }
      req_comp_cnt[task->type].req_cnt++;
    }
    for (int i = 0; i < kNumShards; i++) {
      if (l0_compaction_state[i] == 0) {
        auto tl = ll_[i]->GetTableList(0);
        auto table = tl->GetFront();
        while (true) {
          auto next_table = table->Next();
          if (next_table) {
            table = next_table;
          } else {
            break;
          }
        }
        if (table->type() == TableType::kPmemTable) {
          auto task = new L0CompactionTask();
          task->type = TaskType::kL0Compaction;
          task->shard = i;
          task->l0 = (PmemTable*) table;
          task->memtable_list = (MemTableList*) tl;
          l0_compaction_state[i] = 1;  // configured
          l0_compaction_requests.push_back(task);
          req_comp_cnt[task->type].req_cnt++;
        }
      }
    }

    std::vector<CompactionWorkerData*> available_workers;
    for (int i = 0; i < kNumWorkers; i++) {
      if (num_assigned_tasks[i] < kWorkerQueueDepth) {
        available_workers.push_back(&worker_data_[i]);
      }
    }

    if (!memtable_flush_requests.empty()) {
      while (!available_workers.empty() && !memtable_flush_requests.empty()) {
        std::sort(available_workers.begin(), available_workers.end(), [&](auto& a, auto& b) {
          return num_assigned_tasks[a->id] > num_assigned_tasks[b->id];
        });
        auto& worker = available_workers.back();
        auto& task = memtable_flush_requests.front();
        memtable_flush_requests.pop_front();
        std::unique_lock<std::mutex> wlk(worker->mu);
        worker->q.push(task);
        wlk.unlock();
        worker->cv.notify_one();
        task_to_worker[task] = worker->id;
        num_assigned_tasks[worker->id]++;
        if (num_assigned_tasks[worker->id] >= kWorkerQueueDepth) {
          available_workers.pop_back();
        }
      }
      continue;
    }

    //available_workers.clear();
    //for (int i = 0; i < kNumWorkers; i++) {
    //  if (num_assigned_tasks[i] == 0) {
    //    available_workers.push_back(&worker_data_[i]);
    //  }
    //}
    while (!available_workers.empty() && !l0_compaction_requests.empty()) {
      std::sort(available_workers.begin(), available_workers.end(), [&](auto& a, auto& b) {
        return num_assigned_tasks[a->id] > num_assigned_tasks[b->id];
      });
      auto& worker = available_workers.back();
      auto& task = l0_compaction_requests.front();
      l0_compaction_requests.pop_front();
      std::unique_lock<std::mutex> wlk(worker->mu);
      worker->q.push(task);
      wlk.unlock();
      worker->cv.notify_one();
      task_to_worker[task] = worker->id;
      num_assigned_tasks[worker->id]++;
      l0_compaction_state[task->shard] = 2;  // assigned
      if (num_assigned_tasks[worker->id] >= kWorkerQueueDepth) {
        available_workers.pop_back();
      }
    }

    if (stop_) {
      fprintf(stdout, "bg thread terminating\n");
      break;
    }
  }
}

void ListDB::CompactionWorkerThreadLoop(CompactionWorkerData* td) {
  while (true) {
    std::unique_lock<std::mutex> lk(td->mu);
    td->cv.wait(lk, [&]{ return td->stop || !td->q.empty(); });
    if (td->stop) {
      break;
    }
    auto task = td->q.front();
    td->q.pop();
    td->current_task = task;
    lk.unlock();

    if (task->type == TaskType::kMemTableFlush) {
      FlushMemTable((MemTableFlushTask*) task);
      td->current_task = nullptr;
    } else if (task->type == TaskType::kL0Compaction) {
      ZipperCompactionL0((L0CompactionTask*) task);
      //L0CompactionCopyOnWrite((L0CompactionTask*) task);
      td->current_task = nullptr;
    }
    std::unique_lock<std::mutex> bg_lk(wq_mu_);
    work_completion_queue_.push_back(task);
    bg_lk.unlock();
    wq_cv_.notify_one();
  }
}

//void ListDB::Put(const Key& key, const Value& value) {
//}

// Any table this function returns must be unreferenced manually
// TODO(wkim): Make this function to return a wrapper of table
//   table is unreferenced on the destruction of its wrapper
inline MemTable* ListDB::GetWritableMemTable(size_t kv_size, int shard) {
  auto tl = ll_[shard]->GetTableList(0);
  auto mem = tl->GetMutable(kv_size);
  return (MemTable*) mem;
}

inline MemTable* ListDB::GetMemTable(int shard) {
  auto tl = ll_[shard]->GetTableList(0);
  auto mem = tl->GetFront();
  return (MemTable*) mem;
}

#ifdef LOOKUP_CACHE
inline SimpleHashTable* ListDB::GetHashTable(int shard) {
  //return hash_table_[shard];
  return hash_table_[0];
}
#endif

inline TableList* ListDB::GetTableList(int level, int shard) {
  auto tl = ll_[shard]->GetTableList(level);
  return tl;
}

void ListDB::FlushMemTable(MemTableFlushTask* task) {
  if (task->shard == 0) fprintf(stdout, "FlushMemTable: %p\n", task->imm);
  // Check Reference Counter
  while (task->imm->w_RefCount() > 0) continue;

  // Flush (IUL)
#if 0
  BraidedPmemSkipList* l0_skiplist = new BraidedPmemSkipList();
  for (int i = 0; i < kNumRegions; i++) {
    auto& arena = log_[i][task->shard];
    l0_skiplist->BindArena(arena->pool_id(), arena);
  }
  l0_skiplist->Init();
#else
  auto l0_skiplist = task->imm->l0_skiplist();
#endif

  auto skiplist = task->imm->skiplist();
  auto mem_node = skiplist->head();
  mem_node = mem_node->next[0].load(MO_RELAXED);

  using Node = PmemNode;
  Node* preds[kNumRegions][kMaxHeight];
  Node* pred;
  pred = l0_skiplist->head(log_[0][0]->pool_id());
  for (int i = 0; i < kNumRegions; i++) {
    int pool_id = log_[i][0]->pool_id();
    for (int j = 1; j < kMaxHeight; j++) {
      preds[i][j] = l0_skiplist->head(pool_id);
    }
  }

#ifdef LOOKUP_CACHE
  auto hash_table = GetHashTable(task->shard);
#endif

  while (mem_node) {
    //std::this_thread::yield();
#ifdef GROUP_LOGGING
    while (((std::atomic<uint64_t>*) &mem_node->value)->load(std::memory_order_relaxed) == 0) continue;
#endif
    int pool_id = ((PmemPtr*) &mem_node->value)->pool_id();
    int region = pool_id_to_region_[pool_id];
    Node* node = ((PmemPtr*) &mem_node->value)->get<Node>();
    int height = node->height();
    for (int i = 1; i < height; i++) {
      //std::this_thread::yield();
      preds[region][i]->next[i] = mem_node->value;
      preds[region][i] = ((PmemPtr*) &(preds[region][i]->next[i]))->get<Node>();
    }
    pred->next[0] = mem_node->value;
    pred = ((PmemPtr*) &(pred->next[0]))->get<Node>();

#ifdef LOOKUP_CACHE
    //std::this_thread::yield();
    hash_table->Add(mem_node->key, mem_node->value);
#endif

    //std::this_thread::yield();
    mem_node = mem_node->next[0].load(MO_RELAXED);
  }

  PmemTable* l0_table = new PmemTable(kMemTableCapacity, l0_skiplist);
  task->imm->SetPersistentTable((Table*) l0_table);
  // TODO(wkim): Log this L0 table for recovery
  //task->imm->FinalizeFlush();
  task->memtable_list->CleanUpFlushedImmutables();
}

void ListDB::ManualFlushMemTable(int shard) {
  auto tl = reinterpret_cast<MemTableList*>(ll_[shard]->GetTableList(0));

  auto table = tl->GetFront();
  auto table2 = table->Next();

  if (table->type() != TableType::kMemTable || (table2 != nullptr && table2->type() != TableType::kPmemTable)) {
    fprintf(stdout, "ManualFlushMemTable failed\n");
    return;
  }

  tl->NewFront();
  
  // Flush (IUL)
  auto l0_skiplist = reinterpret_cast<MemTable*>(table)->l0_skiplist();

  auto skiplist = reinterpret_cast<MemTable*>(table)->skiplist();
  auto mem_node = skiplist->head();
  mem_node = mem_node->next[0].load(MO_RELAXED);

  using Node = PmemNode;
  Node* preds[kNumRegions][kMaxHeight];
  Node* pred;
  pred = l0_skiplist->head(log_[0][0]->pool_id());
  for (int i = 0; i < kNumRegions; i++) {
    int pool_id = log_[i][0]->pool_id();
    for (int j = 1; j < kMaxHeight; j++) {
      preds[i][j] = l0_skiplist->head(pool_id);
    }
  }

#ifdef LOOKUP_CACHE
  auto hash_table = GetHashTable(shard);
#endif

  while (mem_node) {
#ifdef GROUP_LOGGING
    while (((std::atomic<uint64_t>*) &mem_node->value)->load(std::memory_order_relaxed) == 0) continue;
#endif
    int pool_id = ((PmemPtr*) &mem_node->value)->pool_id();
    int region = pool_id_to_region_[pool_id];
    Node* node = ((PmemPtr*) &mem_node->value)->get<Node>();
    int height = node->height();
    for (int i = 1; i < height; i++) {
      preds[region][i]->next[i] = mem_node->value;
      preds[region][i] = ((PmemPtr*) &(preds[region][i]->next[i]))->get<Node>();
    }
    pred->next[0] = mem_node->value;
    pred = ((PmemPtr*) &(pred->next[0]))->get<Node>();

#ifdef LOOKUP_CACHE
    //std::this_thread::yield();
    hash_table->Add(mem_node->key, mem_node->value);
#endif

    //std::this_thread::yield();
    mem_node = mem_node->next[0].load(MO_RELAXED);
  }

  PmemTable* l0_table = new PmemTable(kMemTableCapacity, l0_skiplist);
  reinterpret_cast<MemTable*>(table)->SetPersistentTable((Table*) l0_table);
  // TODO(wkim): Log this L0 table for recovery
  tl->CleanUpFlushedImmutables();
}

void ListDB::ZipperCompactionL0(L0CompactionTask* task) {
#if 0
  if (task->shard == 0) fprintf(stdout, "L0 compaction\n");
  using Node = PmemNode;
  auto l0_skiplist = task->l0->skiplist();

  auto l1_tl = ll_[task->shard]->GetTableList(1);
  if (l1_tl->IsEmpty()) {
    auto l1_table = new PmemTable(kL1PmemTableCapacity, l0_skiplist);
    l1_tl->SetFront(l1_table);
    auto table = task->memtable_list->GetFront();
    while (true) {
      auto next_table = table->Next();
      if (next_table) {
        if (next_table == (Table*) task->l0) {
          table->SetNext(nullptr);
          break;
        }
        table = next_table;
      } else {
        break;
      }
    }
    return;
  }
  auto l1_skiplist = ((PmemTable*) l1_tl->GetFront())->skiplist();

  struct ZipperItem {
    PmemPtr node_paddr;
    Node* preds[kMaxHeight];
    uint64_t succs[kMaxHeight];
  };

  std::stack<ZipperItem*> zstack;
  Node* preds[kNumRegions][kMaxHeight];
  uint64_t succs[kNumRegions][kMaxHeight];
  for (int i = 0; i < kNumRegions; i++) {
    int pool_id = l1_arena_[i][0]->pool_id();
    for (int j = 0; j < kMaxHeight; j++) {
      preds[i][j] = l1_skiplist->head(pool_id);
      succs[i][j] = 0;
    }
  }

  PmemPtr node_paddr = l0_skiplist->head_paddr();

  // 1. Scan
  while (true) {
    std::this_thread::yield();
    auto l0_node = node_paddr.get<Node>();
    if (l0_node == nullptr) {
      break;
    }
    int pool_id = node_paddr.pool_id();
    int region = pool_id_to_region_[pool_id];
    int height = l0_node->height();
    PmemPtr curr_paddr = preds[region][height - 1]->next[height - 1];
    for (int i = height - 1; i > 0; i--) {
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          preds[region][i] = curr;
          curr_paddr = curr->next[i];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
      succs[region][i] = curr_paddr.dump();
    }
    {
      PmemPtr curr_paddr = preds[0][0]->next[0];
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          preds[0][0] = curr;
          curr_paddr = curr->next[0];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
      succs[0][0] = curr_paddr.dump();
    }
    auto z = new ZipperItem();
    z->node_paddr = node_paddr;
    z->preds[0] = preds[0][0];
    for (int i = 1; i < kMaxHeight; i++) {
      z->preds[i] = preds[region][i];
    }
    z->succs[0] = succs[0][0];
    for (int i = 1; i < kMaxHeight; i++) {
      z->succs[i] = succs[region][i];
    }
    zstack.push(z);
    node_paddr = l0_node->next[0];
  }

  // 2. Merge
  //bool print_debug = false;
  //if (preds[0][0]->next[0] != 0) {
  //  print_debug = true;
  //}
  while (!zstack.empty()) {
    std::this_thread::yield();
    auto& z = zstack.top();
    auto l0_node = z->node_paddr.get<Node>();
    //if (print_debug) {
    //  std::stringstream debug_ss;
    //  debug_ss << "L0 key: " << l0_node->key << std::endl;
    //  for (int i = kMaxHeight - 1; i >= 0; i--) {
    //    Node* succ = ((PmemPtr*) &(z->succs[i]))->get<Node>();
    //    debug_ss << "level: " << std::setw(2) << i << "\t" << z->preds[i]->key << "\t";
    //    if (succ) {
    //      debug_ss << succ->key << std::endl;
    //    } else {
    //      debug_ss << "NULL" << std::endl;
    //    }
    //  }
    //  fprintf(stdout, "%s\n", debug_ss.str().c_str());
    //}
    {
      auto l0_succ = ((PmemPtr*) &(l0_node->next[0]))->get<Node>();
      auto l1_succ = ((PmemPtr*) &(z->succs[0]))->get<Node>();
      if (l0_succ == nullptr || (l1_succ && l1_succ->key.Compare(l0_succ->key) < 0)) {
        l0_node->next[0] = z->succs[0];
      }
      z->preds[0]->next[0] = z->node_paddr.dump();
    }
    for (int i = 1; i < l0_node->height(); i++) {
      auto l0_succ = ((PmemPtr*) &(l0_node->next[i]))->get<Node>();
      auto l1_succ = ((PmemPtr*) &(z->succs[i]))->get<Node>();
      if (l0_succ == nullptr || (l1_succ && l1_succ->key.Compare(l0_succ->key) < 0)) {
        l0_node->next[i] = z->succs[i];
      }
      z->preds[i]->next[i] = z->node_paddr.dump();
    }
    zstack.pop();
    delete z;
  }
  // Remove empty L0 from MemTableList
  //auto tl = ll_[task->shard]->GetTableList(0);
  auto table = task->memtable_list->GetFront();
  while (true) {
    auto next_table = table->Next();
    if (next_table) {
      if (next_table == (Table*) task->l0) {
        table->SetNext(nullptr);
        break;
      }
      table = next_table;
    } else {
      break;
    }
  }
#else
#if 1
  if (task->shard == 0) fprintf(stdout, "L0 compaction\n");
  using Node = PmemNode;
  auto l0_skiplist = task->l0->skiplist();

  auto l1_tl = ll_[task->shard]->GetTableList(1);
  if (l1_tl->IsEmpty()) {
    auto l1_table = new PmemTable(kL1PmemTableCapacity, l0_skiplist);
    l1_tl->SetFront(l1_table);
    auto table = task->memtable_list->GetFront();
    while (true) {
      auto next_table = table->Next();
      if (next_table) {
        if (next_table == (Table*) task->l0) {
          table->SetNext(nullptr);
          break;
        }
        table = next_table;
      } else {
        break;
      }
    }
    return;
  }
  auto l1_skiplist = ((PmemTable*) l1_tl->GetFront())->skiplist();

  struct ZipperItem {
    PmemPtr node_paddr;
    Node* preds[kMaxHeight];
  };

  std::stack<ZipperItem*> zstack;
  Node* preds[kNumRegions][kMaxHeight];
  for (int i = 0; i < kNumRegions; i++) {
    int pool_id = l1_arena_[i][0]->pool_id();
    for (int j = 0; j < kMaxHeight; j++) {
      preds[i][j] = l1_skiplist->head(pool_id);
    }
  }

  PmemPtr node_paddr = l0_skiplist->head_paddr();

  // 1. Scan
  while (true) {
    std::this_thread::yield();
    auto l0_node = node_paddr.get<Node>();
    if (l0_node == nullptr) {
      break;
    }
    int pool_id = node_paddr.pool_id();
    int region = pool_id_to_region_[pool_id];
    int height = l0_node->height();
    Node* pred = preds[region][height - 1];
    for (int i = height - 1; i > 0; i--) {
      PmemPtr curr_paddr = pred->next[i];
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          pred = curr;
          curr_paddr = pred->next[i];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
      preds[region][i] = pred;
    }
    {
      PmemPtr curr_paddr = preds[0][0]->next[0];
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          preds[0][0] = curr;
          curr_paddr = curr->next[0];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
    }
    auto z = new ZipperItem();
    z->node_paddr = node_paddr;
    z->preds[0] = preds[0][0];
    for (int i = 1; i < kMaxHeight; i++) {
      z->preds[i] = preds[region][i];
    }
    zstack.push(z);
    node_paddr = l0_node->next[0];
  }

  // 2. Merge
  //bool print_debug = false;
  //if (preds[0][0]->next[0] != 0) {
  //  print_debug = true;
  //}
  while (!zstack.empty()) {
    std::this_thread::yield();
    auto& z = zstack.top();
    auto l0_node = z->node_paddr.get<Node>();
    {
      l0_node->next[0] = z->preds[0]->next[0];
      z->preds[0]->next[0] = z->node_paddr.dump();
      //uint64_t tag = l0_node->tag;
      //tag |= 0x100;
      //l0_node->tag = tag;
    }
    for (int i = 1; i < l0_node->height(); i++) {
      l0_node->next[i] = z->preds[i]->next[i];
      z->preds[i]->next[i] = z->node_paddr.dump();
    }
    if (l0_node->height() >= kMaxHeight - 10) {
      int region = z->node_paddr.pool_id();
      sorted_arr_[region][task->shard].emplace_back(l0_node->key, z->node_paddr.dump());
    }
    zstack.pop();
    delete z;
  }

  using MyType1 = std::pair<uint64_t, uint64_t>;
  for (int i = 0; i < kNumRegions; i++) {
    std::sort(sorted_arr_[i][task->shard].begin(), sorted_arr_[i][task->shard].end(),
        [&](const MyType1 &a, const MyType1 &b) { return a.first > b.first; });
  }

  // Remove empty L0 from MemTableList
  //auto tl = ll_[task->shard]->GetTableList(0);
  auto table = task->memtable_list->GetFront();
  while (true) {
    auto next_table = table->Next();
    if (next_table) {
      if (next_table == (Table*) task->l0) {
        table->SetNext(nullptr);
        break;
      }
      table = next_table;
    } else {
      break;
    }
  }
#else
  // Insert N times
  // For Test
  if (task->shard == 0) fprintf(stdout, "L0 compaction\n");

  using Node = PmemNode;
  auto l0_skiplist = task->l0->skiplist();

  auto l1_tl = ll_[task->shard]->GetTableList(1);
  if (l1_tl->IsEmpty()) {
    auto l1_table = new PmemTable(kL1PmemTableCapacity, l0_skiplist);
    l1_tl->SetFront(l1_table);
    auto table = task->memtable_list->GetFront();
    while (true) {
      auto next_table = table->Next();
      if (next_table) {
        if (next_table == (Table*) task->l0) {
          table->SetNext(nullptr);
          break;
        }
        table = next_table;
      } else {
        break;
      }
    }
    return;
  }
  auto l1_skiplist = ((PmemTable*) l1_tl->GetFront())->skiplist();

  PmemPtr node_paddr = l0_skiplist->head_paddr();

  std::stack<PmemPtr> nstack;

  // 1. Scan
  while (true) {
    auto l0_node = node_paddr.get<Node>();
    if (l0_node == nullptr) {
      break;
    }

    nstack.push(node_paddr);
    node_paddr = l0_node->next[0];
  }

  // 2. Merge
  while (!nstack.empty()) {
    auto& l0_paddr = nstack.top();
    //auto l0_node = l0_paddr.get<Node>();

    l1_skiplist->Insert(l0_paddr);

    nstack.pop();
  }
  // Remove empty L0 from MemTableList
  //auto tl = ll_[task->shard]->GetTableList(0);
  auto table = task->memtable_list->GetFront();
  while (true) {
    auto next_table = table->Next();
    if (next_table) {
      if (next_table == (Table*) task->l0) {
        table->SetNext(nullptr);
        break;
      }
      table = next_table;
    } else {
      break;
    }
  }
#endif
#endif
}

void ListDB::L0CompactionCopyOnWrite(L0CompactionTask* task) {
  if (task->shard == 0) fprintf(stdout, "L0 compaction\n");

  using Node = PmemNode;
  auto l0_skiplist = task->l0->skiplist();

  auto l1_tl = ll_[task->shard]->GetTableList(1);
  auto l1_skiplist = ((PmemTable*) l1_tl->GetFront())->skiplist();

  Node* preds[kNumRegions][kMaxHeight];
  uint64_t succs[kNumRegions][kMaxHeight];
  for (int i = 0; i < kNumRegions; i++) {
    int pool_id = l1_arena_[i][0]->pool_id();
    for (int j = 0; j < kMaxHeight; j++) {
      preds[i][j] = l1_skiplist->head(pool_id);
      succs[i][j] = 0;
    }
  }

  PmemPtr node_paddr = l0_skiplist->head_paddr();

  while (true) {
    //std::this_thread::yield();
    auto l0_node = node_paddr.get<Node>();
    if (l0_node == nullptr) {
      break;
    }

    int pool_id = node_paddr.pool_id();
    int region = pool_id_to_region_[pool_id];
    int height = l0_node->height();
    PmemPtr curr_paddr = preds[region][height - 1]->next[height - 1];
    for (int i = height - 1; i > 0; i--) {
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          preds[region][i] = curr;
          curr_paddr = curr->next[i];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
      succs[region][i] = curr_paddr.dump();
    }
    {
      PmemPtr curr_paddr = preds[0][0]->next[0];
      auto curr = curr_paddr.get<Node>();
      while (curr) {
        if (curr->key.Compare(l0_node->key) < 0) {
          preds[0][0] = curr;
          curr_paddr = curr->next[0];
          curr = curr_paddr.get<Node>();
          continue;
        }
        break;
      }
      succs[0][0] = curr_paddr.dump();
    }

    size_t node_size = sizeof(PmemNode) + (height - 1) * 8;
    auto l1_node_paddr = l1_arena_[region][task->shard]->Allocate(node_size);
    auto l1_node = l1_node_paddr.get<Node>();
    l1_node->key = l0_node->key;
    l1_node->tag = l0_node->tag;
    l1_node->value = l0_node->value;
    l1_node->next[0] = succs[0][0];
    for (int i = 1; i < height; i++) {
      l1_node->next[i] = succs[region][i];
    }
    clwb(l1_node, node_size);
    _mm_sfence();
    preds[0][0]->next[0] = l1_node_paddr.dump();
    for (int i = 1 ;i < height; i++) {
      preds[region][i]->next[i] = l1_node_paddr.dump();
    }
    
    node_paddr = l0_node->next[0];
  }

  // Remove empty L0 from MemTableList
  //auto tl = ll_[task->shard]->GetTableList(0);
  auto table = task->memtable_list->GetFront();
  while (true) {
    auto next_table = table->Next();
    if (next_table) {
      if (next_table == (Table*) task->l0) {
        table->SetNext(nullptr);
        break;
      }
      table = next_table;
    } else {
      break;
    }
  }
}

void ListDB::PrintDebugLsmState(int shard) {
  auto tl = GetTableList(0, shard);
  auto table = tl->GetFront();
  int mem_cnt = 0;
  int l0_cnt = 0;
  while (table) {
    if (table->type() == TableType::kMemTable) {
      mem_cnt++;
    } else if (table->type() == TableType::kPmemTable) {
      l0_cnt++;
    }
    table = table->Next();
  }

  fprintf(stdout, "mem: %d, L0: %d\n", mem_cnt, l0_cnt);
}

#endif  // LISTDB_LISTDB_H_
